type TalentFactory @entity {
  # factory address
  id: ID!
  # amount of talent tokens created
  talentCount: BigInt!
  # current owner of the factory
  owner: ID!
}

type Supporter @entity {
  id: ID!
  totalAmount: BigDecimal!
  rewardsClaimed: BigDecimal!
  talents: [SupporterTalentToken!]! @derivedFrom(field: "supporter")
}

type SupporterTalentToken @entity {
  id: ID!
  talent: TalentToken!
  supporter: Supporter!
  amount: BigDecimal!
  talAmount: BigDecimal!
  firstTimeBoughtAt: BigInt!
  lastTimeBoughtAt: BigInt!
}

type TalentToken @entity {
  # token address
  id: ID!
  # talent address
  owner: ID!
  # token symbol
  symbol: String!
  # token name
  name: String!
  # token decimals
  decimals: BigInt!
  # token max supply
  maxSupply: BigInt!
  # token total supply
  totalSupply: BigInt!
  # market cap
  marketCap: BigInt!
  # rewards that are ready to be claimed
  rewardsReady: BigDecimal!
  # rewards that have already been claimed
  rewardsClaimed: BigDecimal!
  # creation
  createdAtTimestamp: BigInt!
  # block stake was created at
  createdAtBlockNumber: BigInt!
  # all transactions for this token
  txCount: BigInt!
  # all users that have a tokens
  supporterCounter: BigInt!
  # total value locked
  totalValueLocked: BigInt!
  # if token is disabled
  disabled: Boolean!
  supporters: [SupporterTalentToken!]! @derivedFrom(field: "talent")
  # daily price for this token
  tokenDayData: [TalentTokenDayData!]! @derivedFrom(field: "talent")
}

type TalentTokenDayData @entity {
  id: ID!
  date: Int!
  talent: TalentToken!
  # volume stats
  dailySupply: BigInt!
}
